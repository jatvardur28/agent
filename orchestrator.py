
#### 5. `orchestrator.py` (–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–æ–≥–∏–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ê–≥–µ–Ω—Ç–æ–≤ 3, 4 –∏ 5)

```python
# ~/ai_agent_system/orchestrator.py
import json
import logging
import asyncio
import re # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ SEARCH_REQUEST
from typing import Dict, Any, List

from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage, ToolMessage

from llm_integrations import LLMIntegration
from search_tool import ALL_TOOLS # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ web_search)
import database

logger = logging.getLogger(__name__)

llm_integration = LLMIntegration()

class TelegramCallbackHandler:
    """
    –ö–æ–ª–ª–±—ç–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è LangChain, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –∞–≥–µ–Ω—Ç–∞ –≤ Telegram.
    """
    def __init__(self, chat_id: int, send_message_callback):
        self.chat_id = chat_id
        self.send_message_callback = send_message_callback

    async def on_agent_action(self, action: Any, **kwargs: Any) -> Any:
        await self.send_message_callback(self.chat_id, f"‚û°Ô∏è _{action.log}_", parse_mode='Markdown')

    async def on_tool_start(self, serialized: Dict[str, Any], input_str: str, **kwargs: Any) -> Any:
        tool_name = serialized.get("name", "Unknown Tool")
        await self.send_message_callback(self.chat_id, f"üõ†Ô∏è *–ò—Å–ø–æ–ª—å–∑—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç* `{tool_name}`: `{input_str}`", parse_mode='Markdown')

    async def on_tool_end(self, output: str, **kwargs: Any) -> Any:
        truncated_output = (output[:500] + '...') if len(output) > 500 else output
        await self.send_message_callback(self.chat_id, f"‚úÖ *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.* –†–µ–∑—É–ª—å—Ç–∞—Ç (–æ–±—Ä–µ–∑–∞–Ω–æ): `{truncated_output}`", parse_mode='Markdown')

    async def on_agent_finish(self, finish: Any, **kwargs: Any) -> Any:
        pass


async def create_agent_from_config(agent_id: str, telegram_callback_handler: TelegramCallbackHandler = None):
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞ (LLM Chain –∏–ª–∏ AgentExecutor) –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î.
    """
    config = database.get_agent_config(agent_id)
    if not config:
        logger.error(f"Agent configuration for '{agent_id}' not found.")
        return None

    # –°–æ–∑–¥–∞–µ–º LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # –î–ª—è –ê–≥–µ–Ω—Ç–∞ #5 (–¥–≤–∏–∂–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞) –º—ã –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (web_search) –∫ –µ–≥–æ LLM.
    llm = llm_integration.get_llm(
        provider=config['llm_provider'],
        model_name=config['llm_model'],
        agent_id=config['id'] if config['llm_provider'] == 'hyperbolic' else None,
        bind_tools=(agent_id == "agent5_openrouter0") # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –∫ LLM –ê–≥–µ–Ω—Ç–∞ #5
    )

    # SimpleChainWrapper –¥–ª—è –≤—Å–µ—Ö LLM, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è LangChain AgentExecutor
    # (–ê–≥–µ–Ω—Ç—ã 1, 2, 3, 4, 6, –∏ –ê–≥–µ–Ω—Ç 5 - LLM —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º)
    class CustomLLMChainWrapper:
        def __init__(self, llm_instance, system_prompt):
            self.llm_instance = llm_instance
            self.system_prompt = system_prompt
            # –ï—Å–ª–∏ llm_instance —ç—Ç–æ ChatOpenAI —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (Agent #5),
            # —Ç–æ –µ–≥–æ Chain –¥–ª—è tool-calling –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏ ainvoke.

        async def ainvoke(self, input_data: Dict[str, Any], chat_history: List = None):
            user_message = input_data.get('input', '')
            
            # –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
            messages = [SystemMessage(content=self.system_prompt)]
            if chat_history:
                messages.extend(chat_history)
            messages.append(HumanMessage(content=user_message))

            # –ï—Å–ª–∏ llm_instance —ç—Ç–æ –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π HyperbolicLLM
            if hasattr(self.llm_instance, 'generate'):
                # HyperbolicLLM –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç dict for messages
                formatted_messages = [{"role": m.type, "content": m.content} for m in messages]
                response_content = await self.llm_instance.generate(formatted_messages)
                return {"output": response_content}
            # –ï—Å–ª–∏ llm_instance —ç—Ç–æ LangChain ChatOpenAI LLM (–≤–∫–ª—é—á–∞—è —Ç–æ—Ç, —á—Ç–æ —Å bind_tools)
            else:
                response = await self.llm_instance.ainvoke(messages)
                # LangChain ChatOpenAI LLM —Å bind_tools –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å ToolCalls
                return {"output": response.content, "tool_calls": response.tool_calls}

    return CustomLLMChainWrapper(llm, config['system_prompt'])


async def run_full_agent_process(user_query: str, chat_id: int, send_message_callback):
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤: –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
    """
    telegram_callback_handler = TelegramCallbackHandler(chat_id, send_message_callback)

    await send_message_callback(chat_id, "üöÄ **–ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞...**\n\n", parse_mode='Markdown')

    # --- –®–∞–≥ 1: –ê–≥–µ–Ω—Ç ‚Ññ1 (–ü—Ä–æ–º–ø—Ç-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä) ---
    await send_message_callback(chat_id, "ü§ñ **–ê–≥–µ–Ω—Ç #1 (–ü—Ä–æ–º–ø—Ç-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä)**: –ü—Ä–µ–æ–±—Ä–∞–∑—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", parse_mode='Markdown')
    agent1 = await create_agent_from_config("agent1_hyper0", telegram_callback_handler)
    if not agent1:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç #1 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    try:
        a1_result = await agent1.ainvoke({"input": user_query})
        refined_query = a1_result.get('output', "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        await send_message_callback(chat_id, f"üìù **–ê–≥–µ–Ω—Ç #1 –∑–∞–≤–µ—Ä—à–∏–ª.** –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n```\n{refined_query}\n```", parse_mode='Markdown')
    except Exception as e:
        await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ #1:** {e}")
        logger.exception("Agent 1 failed.")
        return

    # --- –®–∞–≥ 2: –ê–≥–µ–Ω—Ç ‚Ññ2 (–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä) ---
    await send_message_callback(chat_id, "\nü§ñ **–ê–≥–µ–Ω—Ç #2 (–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)**: –ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π...", parse_mode='Markdown')
    agent2 = await create_agent_from_config("agent2_hyper1", telegram_callback_handler)
    if not agent2:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç #2 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    
    try:
        a2_result = await agent2.ainvoke({"input": refined_query})
        orchestration_plan_raw = a2_result.get('output', "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏.")
        
        try:
            orchestration_plan = json.loads(orchestration_plan_raw)
            agent3_task = orchestration_plan.get('agent3_task')
            agent4_task = orchestration_plan.get('agent4_task')

            if not agent3_task or not agent4_task:
                raise ValueError("Parsed plan is missing 'agent3_task' or 'agent4_task'. Check Agent #2's output format.")

            await send_message_callback(chat_id, f"üìã **–ê–≥–µ–Ω—Ç #2 –∑–∞–≤–µ—Ä—à–∏–ª.** –ü–ª–∞–Ω —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ê–≥–µ–Ω—Ç–æ–≤ #3 –∏ #4.", parse_mode='Markdown')
            logger.info(f"Agent 2 output plan: {orchestration_plan}")

        except json.JSONDecodeError as e:
            await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–∞–Ω–∞ –ê–≥–µ–Ω—Ç–∞ #2:** –û–∂–∏–¥–∞–ª—Å—è JSON, –Ω–æ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. {e}\nRaw output: ```{orchestration_plan_raw}```", parse_mode='Markdown')
            logger.error(f"Agent 2 JSON parsing error: {e}, Raw output: {orchestration_plan_raw}")
            return
        except ValueError as e:
            await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞ –ê–≥–µ–Ω—Ç–∞ #2:** {e}", parse_mode='Markdown')
            logger.error(f"Agent 2 plan structure error: {e}")
            return

    except Exception as e:
        await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ #2:** {e}", parse_mode='Markdown')
        logger.exception("Agent 2 failed.")
        return

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ê–≥–µ–Ω—Ç–∞ ‚Ññ5 (–ü–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ LLM) ---
    # –ê–≥–µ–Ω—Ç #5 - —ç—Ç–æ LLM, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º —É–º–µ–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tool-calling (web_search)
    agent5_search_llm_chain = await create_agent_from_config("agent5_openrouter0", telegram_callback_handler)
    if not agent5_search_llm_chain:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç #5 (–ü–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫) –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    async def perform_web_search(query: str) -> str:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ê–≥–µ–Ω—Ç–∞ ‚Ññ5."""
        try:
            logger.info(f"Calling Agent #5 (Search LLM) for query: {query}")
            # –ê–≥–µ–Ω—Ç #5 - —ç—Ç–æ CustomLLMChainWrapper, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Ä—Ç—ã–≤–∞–µ—Ç ChatOpenAI —Å bind_tools
            # LangChain –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ToolCalls, –∫–æ–≥–¥–∞ LLM –∏—Ö –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç.
            # –ï—Å–ª–∏ LLM –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, response.tool_calls –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω,
            # –∏ LangChain —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç tool_call, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
            # –ú—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É –∑–∞–ø—Ä–æ—Å, –æ–Ω —Å–∞–º —Ä–µ—à–∏—Ç, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å web_search.
            
            # –î–ª—è AgentExecutor LLM, –º—ã –≤—ã–∑—ã–≤–∞–µ–º .invoke –∏–ª–∏ .ainvoke —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π.
            # –ó–¥–µ—Å—å, LLM (Agent #5) —Å–∞–º —Ä–µ—à–∏—Ç, –∫–æ–≥–¥–∞ –≤—ã–∑–≤–∞—Ç—å web_search.
            
            # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ LangChain AgentExecutor
            # –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ü–µ–ø—å –¥–ª—è LLM –ê–≥–µ–Ω—Ç–∞ 5 –∏ –ø—Ä–∏–≤—è–∂–µ–º –∫ –Ω–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            temp_agent5_llm_config = database.get_agent_config("agent5_openrouter0")
            temp_llm_with_tools = llm_integration.get_llm(
                provider=temp_agent5_llm_config['llm_provider'],
                model_name=temp_agent5_llm_config['llm_model'],
                bind_tools=True
            )
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π AgentExecutor –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Tool Calling
            temp_prompt = ChatPromptTemplate.from_messages([
                ("system", temp_agent5_llm_config['system_prompt']),
                MessagesPlaceholder("chat_history", optional=True),
                ("human", "{input}"),
                MessagesPlaceholder("agent_scratchpad"),
            ])
            temp_agent_executor = AgentExecutor(
                agent=create_tool_calling_agent(temp_llm_with_tools, ALL_TOOLS, temp_prompt),
                tools=ALL_TOOLS,
                verbose=True,
                handle_parsing_errors=True,
                callbacks=[telegram_callback_handler] # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π AgentExecutor
            search_result_obj = await temp_agent_executor.ainvoke({"input": query})
            
            result_content = search_result_obj.get('output', f"No search result from Agent #5 for query: {query}")
            logger.info(f"Agent #5 (Search LLM) returned result for query '{query}': {result_content[:200]}...")
            return result_content
        except Exception as e:
            logger.error(f"Error calling Agent #5 (Search LLM) for query '{query}': {e}")
            return f"Error performing web search: {e}"


    # --- –®–∞–≥ 3 & 4: –ê–≥–µ–Ω—Ç—ã ‚Ññ3 –∏ ‚Ññ4 (–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏) –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å ---
    await send_message_callback(chat_id, "\nüîÑ **–ê–≥–µ–Ω—Ç—ã #3 –∏ #4 (–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏)**: –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...", parse_mode='Markdown')

    agent3 = await create_agent_from_config("agent3_hyper2", telegram_callback_handler)
    agent4 = await create_agent_from_config("agent4_hyper3", telegram_callback_handler)

    if not agent3 or not agent4:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (—Å —Ü–∏–∫–ª–æ–º –ø–æ–∏—Å–∫–∞)
    async def run_research_agent_with_search_loop(agent_instance, task_config, agent_label):
        chat_history = []
        max_search_attempts = 2 # –õ–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        current_attempt = 0
        final_result = ""

        await send_message_callback(chat_id, f"üîç **{agent_label}** –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...", parse_mode='Markdown')

        while current_attempt <= max_search_attempts:
            input_message = task_config['instructional_query']
            if current_attempt > 0 and final_result: # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                input_message += f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {final_result}"
                chat_history.append(AIMessage(content=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {final_result[:200]}..."))

            try:
                # LLM (Hyperbolic) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–∏—Å–∫
                agent_response_obj = await agent_instance.ainvoke({"input": input_message}, chat_history=chat_history)
                agent_output = agent_response_obj.get('output', '')

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç LLM –≤ –∏—Å—Ç–æ—Ä–∏—é
                chat_history.append(HumanMessage(content=input_message))
                chat_history.append(AIMessage(content=agent_output))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–æ—Å–∏–ª –ª–∏ –∞–≥–µ–Ω—Ç –ø–æ–∏—Å–∫
                search_match = re.search(r"<SEARCH_REQUEST>(.*?)</SEARCH_REQUEST>", agent_output, re.DOTALL)
                if search_match and current_attempt < max_search_attempts:
                    search_query = search_match.group(1).strip()
                    await send_message_callback(chat_id, f"üîç {agent_label} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫: `{search_query}`", parse_mode='Markdown')
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ê–≥–µ–Ω—Ç–∞ #5
                    search_result = await perform_web_search(search_query)
                    final_result = search_result # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                    
                    await send_message_callback(chat_id, f"‚úÖ –ü–æ–∏—Å–∫ –¥–ª—è {agent_label} –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç—É.", parse_mode='Markdown')
                    current_attempt += 1
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                else:
                    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω –∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω, —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
                    await send_message_callback(chat_id, f"‚úÖ **{agent_label} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.**", parse_mode='Markdown')
                    return agent_output # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            except Exception as e:
                await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ {agent_label}:** {e}", parse_mode='Markdown')
                logger.exception(f"{agent_label} failed during research loop.")
                return f"Error: {e}"
        
        # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ –ª–∏–º–∏—Ç—É –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await send_message_callback(chat_id, f"‚ö†Ô∏è {agent_label} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.", parse_mode='Markdown')
        return agent_output # –í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫—É

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å
    try:
        results = await asyncio.gather(
            run_research_agent_with_search_loop(agent3, agent3_task, "–ê–≥–µ–Ω—Ç #3"),
            run_research_agent_with_search_loop(agent4, agent4_task, "–ê–≥–µ–Ω—Ç #4"),
            return_exceptions=True
        )
        agent3_res, agent4_res = results

        if isinstance(agent3_res, Exception):
            await send_message_callback(chat_id, f"‚ùå **–ê–≥–µ–Ω—Ç #3 –ø–æ—Ç–µ—Ä–ø–µ–ª —Å–±–æ–π:** {agent3_res}", parse_mode='Markdown')
            agent3_res = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ê–≥–µ–Ω—Ç–∞ #3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏."
        if isinstance(agent4_res, Exception):
            await send_message_callback(chat_id, f"‚ùå **–ê–≥–µ–Ω—Ç #4 –ø–æ—Ç–µ—Ä–ø–µ–ª —Å–±–æ–π:** {agent4_res}", parse_mode='Markdown')
            agent4_res = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ê–≥–µ–Ω—Ç–∞ #4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏."

        logger.info(f"Agent #3 final result (first 500 chars): {agent3_res[:500] if agent3_res else 'None'}")
        logger.info(f"Agent #4 final result (first 500 chars): {agent4_res[:500] if agent4_res else 'None'}")

    except Exception as e:
        await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ê–≥–µ–Ω—Ç–æ–≤ #3/#4:** {e}", parse_mode='Markdown')
        logger.exception("Parallel execution of Agents 3/4 failed.")
        return

    # --- –®–∞–≥ 6: –ê–≥–µ–Ω—Ç ‚Ññ6 (–§–∏–Ω–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫) ---
    await send_message_callback(chat_id, "\nüß† **–ê–≥–µ–Ω—Ç #6 (–§–∏–Ω–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫)**: –û–±—ä–µ–¥–∏–Ω—è—é –∏ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...", parse_mode='Markdown')
    agent6 = await create_agent_from_config("agent6_nous0", telegram_callback_handler)
    if not agent6:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç #6 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    final_analysis_input = (
        f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query}\n\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –ê–≥–µ–Ω—Ç–∞ #3:\n{agent3_res}\n\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –ê–≥–µ–Ω—Ç–∞ #4:\n{agent4_res}\n\n"
        "–û–±—ä–µ–¥–∏–Ω–∏ –∏ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–π —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –µ–¥–∏–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π –æ—Ç—á–µ—Ç."
    )

    try:
        a6_result = await agent6.ainvoke({"input": final_analysis_input})
        final_report = a6_result.get('output', "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.")
        await send_message_callback(chat_id, "‚úÖ **–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**", parse_mode='Markdown')
        await send_message_callback(chat_id, final_report, parse_mode='Markdown')
    except Exception as e:
        await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ #6:** {e}", parse_mode='Markdown')
        logger.exception("Agent 6 failed.")
        return

    await send_message_callback(chat_id, "\n‚ú® **–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!**", parse_mode='Markdown')
